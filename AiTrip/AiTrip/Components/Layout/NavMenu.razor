@using AiTrip.Domain.Interfaces

@inject ISearchService SearchService
@inject ILogger<NavMenu> Logger
@rendermode InteractiveServer

<nav class="navbar navbar-expand navbar-dark bg-dark">
	<a class="navbar-brand" href="#">AiTrip</a>

	<div class="collapse navbar-collapse" id="navbarSupportedContent">

		<ul class="navbar-nav mr-auto">
			<li class="nav-item active">
				<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
					<span aria-hidden="true"></span> Home
				</NavLink>
			</li>
			<li class="nav-item">
				<NavLink class="nav-link" href="admin">
					<span aria-hidden="true"></span> Admin
				</NavLink>
			</li>
		</ul>

	</div>
	
	<form class="form-inline row" >
		<input @bind-value="@Search" class="form-control col" type="search" placeholder="Search" aria-label="Search">
		<button @onclick="OnClick" disabled="@Disabled" class="btn btn-outline-success col" type="button">Search</button>
	</form>

	<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
		<span class="navbar-toggler-icon"></span>
	</button>
</nav>

@code
{
	public string Search { get; set; } = string.Empty;
	public bool Disabled { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		SearchService.SearchFinished().Subscribe(async isFinished =>
		{
			Disabled = !isFinished;
			await InvokeAsync(() =>
			{
				var stateHasChanged = StateHasChanged;
				stateHasChanged();
			});
		});

	}

	private void OnClick()
	{
		Disabled = true;
		SearchService.Search(Search);
	}

}

